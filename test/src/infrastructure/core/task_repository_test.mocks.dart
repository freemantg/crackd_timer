// Mocks generated by Mockito 5.4.1 from annotations
// in crackd_timer/test/src/infrastructure/core/task_repository_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:crackd_timer/src/infrastructure/core/tasks_local_service.dart'
    as _i2;
import 'package:crackd_timer/src/infrastructure/tasks/tasks_dto.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TasksLocalSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksLocalSource extends _i1.Mock implements _i2.TasksLocalSource {
  MockTasksLocalSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.TaskDto> fetchNoteStream(_i4.TaskDto? taskDto) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNoteStream,
          [taskDto],
        ),
        returnValue: _i3.Stream<_i4.TaskDto>.empty(),
      ) as _i3.Stream<_i4.TaskDto>);
  @override
  _i3.Stream<List<_i4.TaskDto>> getAllTasksStream() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasksStream,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.TaskDto>>.empty(),
      ) as _i3.Stream<List<_i4.TaskDto>>);
  @override
  _i3.Stream<List<_i4.TaskDto>> getActiveTasksStream() => (super.noSuchMethod(
        Invocation.method(
          #getActiveTasksStream,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.TaskDto>>.empty(),
      ) as _i3.Stream<List<_i4.TaskDto>>);
  @override
  _i3.Stream<List<_i4.TaskDto>> getCompletedTasksStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompletedTasksStream,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.TaskDto>>.empty(),
      ) as _i3.Stream<List<_i4.TaskDto>>);
  @override
  _i3.Future<void> insert(_i4.TaskDto? taskDto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [taskDto],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> delete(_i4.TaskDto? taskDto) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [taskDto],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> update(_i4.TaskDto? taskDto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [taskDto],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
