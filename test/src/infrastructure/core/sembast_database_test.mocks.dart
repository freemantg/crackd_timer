// Mocks generated by Mockito 5.4.1 from annotations
// in crackd_timer/test/src/infrastructure/core/sembast_database_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;
import 'dart:io' as _i4;

import 'package:crackd_timer/src/infrastructure/core/database_wrapper.dart'
    as _i8;
import 'package:crackd_timer/src/infrastructure/core/path_provider_wrapper.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:sembast/src/api/transaction.dart' as _i5;
import 'package:sembast/src/api/v2/sembast.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_2 extends _i1.SmartFake implements Uri {
  _FakeUri_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_3 extends _i1.SmartFake implements _i4.Directory {
  _FakeDirectory_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_4 extends _i1.SmartFake implements _i4.FileStat {
  _FakeFileStat_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_5 extends _i1.SmartFake
    implements _i4.FileSystemEntity {
  _FakeFileSystemEntity_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i3.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: 0,
      ) as int);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  _i2.Future<T> transaction<T>(
          _i2.FutureOr<T> Function(_i5.Transaction)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
              ),
            ),
      ) as _i2.Future<T>);
  @override
  _i2.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
}

/// A class which mocks [DatabaseFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseFactory extends _i1.Mock implements _i3.DatabaseFactory {
  MockDatabaseFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasStorage => (super.noSuchMethod(
        Invocation.getter(#hasStorage),
        returnValue: false,
      ) as bool);
  @override
  _i2.Future<_i3.Database> openDatabase(
    String? path, {
    int? version,
    _i3.OnVersionChangedFunction? onVersionChanged,
    _i3.DatabaseMode? mode,
    _i3.SembastCodec? codec,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openDatabase,
          [path],
          {
            #version: version,
            #onVersionChanged: onVersionChanged,
            #mode: mode,
            #codec: codec,
          },
        ),
        returnValue: _i2.Future<_i3.Database>.value(_FakeDatabase_1(
          this,
          Invocation.method(
            #openDatabase,
            [path],
            {
              #version: version,
              #onVersionChanged: onVersionChanged,
              #mode: mode,
              #codec: codec,
            },
          ),
        )),
      ) as _i2.Future<_i3.Database>);
  @override
  _i2.Future<void> deleteDatabase(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteDatabase,
          [path],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i4.Directory {
  MockDirectory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_2(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);
  @override
  _i4.Directory get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeDirectory_3(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i4.Directory);
  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
      ) as bool);
  @override
  _i4.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_3(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i4.Directory);
  @override
  _i2.Future<_i4.Directory> create({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#recursive: recursive},
        ),
        returnValue: _i2.Future<_i4.Directory>.value(_FakeDirectory_3(
          this,
          Invocation.method(
            #create,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i2.Future<_i4.Directory>);
  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<_i4.Directory> createTemp([String? prefix]) => (super.noSuchMethod(
        Invocation.method(
          #createTemp,
          [prefix],
        ),
        returnValue: _i2.Future<_i4.Directory>.value(_FakeDirectory_3(
          this,
          Invocation.method(
            #createTemp,
            [prefix],
          ),
        )),
      ) as _i2.Future<_i4.Directory>);
  @override
  _i4.Directory createTempSync([String? prefix]) => (super.noSuchMethod(
        Invocation.method(
          #createTempSync,
          [prefix],
        ),
        returnValue: _FakeDirectory_3(
          this,
          Invocation.method(
            #createTempSync,
            [prefix],
          ),
        ),
      ) as _i4.Directory);
  @override
  _i2.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i2.Future<String>.value(''),
      ) as _i2.Future<String>);
  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  _i2.Future<_i4.Directory> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i2.Future<_i4.Directory>.value(_FakeDirectory_3(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i2.Future<_i4.Directory>);
  @override
  _i4.Directory renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeDirectory_3(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i4.Directory);
  @override
  _i2.Stream<_i4.FileSystemEntity> list({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [],
          {
            #recursive: recursive,
            #followLinks: followLinks,
          },
        ),
        returnValue: _i2.Stream<_i4.FileSystemEntity>.empty(),
      ) as _i2.Stream<_i4.FileSystemEntity>);
  @override
  List<_i4.FileSystemEntity> listSync({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listSync,
          [],
          {
            #recursive: recursive,
            #followLinks: followLinks,
          },
        ),
        returnValue: <_i4.FileSystemEntity>[],
      ) as List<_i4.FileSystemEntity>);
  @override
  _i2.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i2.Future<_i4.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i2.Future<_i4.FileStat>.value(_FakeFileStat_4(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i2.Future<_i4.FileStat>);
  @override
  _i4.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_4(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i4.FileStat);
  @override
  _i2.Future<_i4.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i2.Future<_i4.FileSystemEntity>.value(_FakeFileSystemEntity_5(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i2.Future<_i4.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Stream<_i4.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i2.Stream<_i4.FileSystemEvent>.empty(),
      ) as _i2.Stream<_i4.FileSystemEvent>);
}

/// A class which mocks [PathProviderWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProviderWrapper extends _i1.Mock
    implements _i7.PathProviderWrapper {
  MockPathProviderWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i4.Directory> getApplicationDocumentsDirectory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getApplicationDocumentsDirectory,
          [],
        ),
        returnValue: _i2.Future<_i4.Directory>.value(_FakeDirectory_3(
          this,
          Invocation.method(
            #getApplicationDocumentsDirectory,
            [],
          ),
        )),
      ) as _i2.Future<_i4.Directory>);
}

/// A class which mocks [DatabaseFactoryWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseFactoryWrapper extends _i1.Mock
    implements _i8.DatabaseFactoryWrapper {
  MockDatabaseFactoryWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i3.Database> openDatabase(String? path) => (super.noSuchMethod(
        Invocation.method(
          #openDatabase,
          [path],
        ),
        returnValue: _i2.Future<_i3.Database>.value(_FakeDatabase_1(
          this,
          Invocation.method(
            #openDatabase,
            [path],
          ),
        )),
      ) as _i2.Future<_i3.Database>);
}
