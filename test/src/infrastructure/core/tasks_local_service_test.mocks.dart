// Mocks generated by Mockito 5.4.1 from annotations
// in crackd_timer/test/src/infrastructure/core/tasks_local_service_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:crackd_timer/src/infrastructure/core/store_ref_wrapper.dart'
    as _i7;
import 'package:crackd_timer/src/infrastructure/core/tasks_local_service.dart'
    as _i4;
import 'package:crackd_timer/src/infrastructure/tasks/tasks_dto.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:sembast/sembast.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecordRef_1<K1 extends Object?, V1 extends Object?>
    extends _i1.SmartFake implements _i3.RecordRef<K1, V1> {
  _FakeRecordRef_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecordSnapshot_2<K1 extends Object?, V1 extends Object?>
    extends _i1.SmartFake implements _i3.RecordSnapshot<K1, V1> {
  _FakeRecordSnapshot_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStoreRef_3<K1 extends Object?, V1 extends Object?>
    extends _i1.SmartFake implements _i3.StoreRef<K1, V1> {
  _FakeStoreRef_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryRef_4<K extends Object?, V extends Object?>
    extends _i1.SmartFake implements _i3.QueryRef<K, V> {
  _FakeQueryRef_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TasksLocalSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksLocalSource extends _i1.Mock implements _i4.TasksLocalSource {
  MockTasksLocalSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Stream<_i5.TaskDto> fetchNoteStream(_i5.TaskDto? taskDto) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNoteStream,
          [taskDto],
        ),
        returnValue: _i2.Stream<_i5.TaskDto>.empty(),
      ) as _i2.Stream<_i5.TaskDto>);
  @override
  _i2.Stream<List<_i5.TaskDto>> getAllTasksStream() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasksStream,
          [],
        ),
        returnValue: _i2.Stream<List<_i5.TaskDto>>.empty(),
      ) as _i2.Stream<List<_i5.TaskDto>>);
  @override
  _i2.Stream<List<_i5.TaskDto>> getActiveTasksStream() => (super.noSuchMethod(
        Invocation.method(
          #getActiveTasksStream,
          [],
        ),
        returnValue: _i2.Stream<List<_i5.TaskDto>>.empty(),
      ) as _i2.Stream<List<_i5.TaskDto>>);
  @override
  _i2.Stream<List<_i5.TaskDto>> getCompletedTasksStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompletedTasksStream,
          [],
        ),
        returnValue: _i2.Stream<List<_i5.TaskDto>>.empty(),
      ) as _i2.Stream<List<_i5.TaskDto>>);
  @override
  _i2.Future<void> insert(_i5.TaskDto? taskDto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [taskDto],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> delete(_i5.TaskDto? taskDto) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [taskDto],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> update(_i5.TaskDto? taskDto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [taskDto],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i3.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: 0,
      ) as int);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  _i2.Future<T> transaction<T>(
          _i2.FutureOr<T> Function(_i3.Transaction)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
              ),
            ),
      ) as _i2.Future<T>);
  @override
  _i2.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
}

/// A class which mocks [RecordSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecordSnapshot<K extends Object?, V extends Object?> extends _i1.Mock
    implements _i3.RecordSnapshot<K, V> {
  MockRecordSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RecordRef<K, V> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeRecordRef_1<K, V>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i3.RecordRef<K, V>);
  @override
  K get key => (super.noSuchMethod(
        Invocation.getter(#key),
        returnValue: _i6.dummyValue<K>(
          this,
          Invocation.getter(#key),
        ),
      ) as K);
  @override
  V get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _i6.dummyValue<V>(
          this,
          Invocation.getter(#value),
        ),
      ) as V);
  @override
  Object? operator [](String? field) => (super.noSuchMethod(Invocation.method(
        #[],
        [field],
      )) as Object?);
  @override
  _i3.RecordSnapshot<RK, RV> cast<RK extends Object?, RV extends Object?>() =>
      (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeRecordSnapshot_2<RK, RV>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i3.RecordSnapshot<RK, RV>);
}

/// A class which mocks [Finder].
///
/// See the documentation for Mockito's code generation for more information.
class MockFinder extends _i1.Mock implements _i3.Finder {
  MockFinder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set filter(_i3.Filter? filter) => super.noSuchMethod(
        Invocation.setter(
          #filter,
          filter,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set offset(int? offset) => super.noSuchMethod(
        Invocation.setter(
          #offset,
          offset,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set limit(int? limit) => super.noSuchMethod(
        Invocation.setter(
          #limit,
          limit,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set sortOrders(List<_i3.SortOrder>? sortOrders) => super.noSuchMethod(
        Invocation.setter(
          #sortOrders,
          sortOrders,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set sortOrder(_i3.SortOrder? sortOrder) => super.noSuchMethod(
        Invocation.setter(
          #sortOrder,
          sortOrder,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set start(_i3.Boundary? start) => super.noSuchMethod(
        Invocation.setter(
          #start,
          start,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set end(_i3.Boundary? end) => super.noSuchMethod(
        Invocation.setter(
          #end,
          end,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RecordRef].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecordRef<K extends Object?, V extends Object?> extends _i1.Mock
    implements _i3.RecordRef<K, V> {
  MockRecordRef() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.StoreRef<K, V> get store => (super.noSuchMethod(
        Invocation.getter(#store),
        returnValue: _FakeStoreRef_3<K, V>(
          this,
          Invocation.getter(#store),
        ),
      ) as _i3.StoreRef<K, V>);
  @override
  K get key => (super.noSuchMethod(
        Invocation.getter(#key),
        returnValue: _i6.dummyValue<K>(
          this,
          Invocation.getter(#key),
        ),
      ) as K);
  @override
  _i3.RecordRef<RK, RV> cast<RK extends Object?, RV extends Object?>() =>
      (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeRecordRef_1<RK, RV>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i3.RecordRef<RK, RV>);
}

/// A class which mocks [StoreRefWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreRefWrapper extends _i1.Mock implements _i7.StoreRefWrapper {
  MockStoreRefWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RecordRef<Object?, Object?> record(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #record,
          [key],
        ),
        returnValue: _FakeRecordRef_1<Object?, Object?>(
          this,
          Invocation.method(
            #record,
            [key],
          ),
        ),
      ) as _i3.RecordRef<Object?, Object?>);
  @override
  _i2.Future<dynamic> delete(
    _i3.Database? database, {
    _i3.Finder? finder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [database],
          {#finder: finder},
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> update(
    _i3.Database? database,
    dynamic values, {
    _i3.Finder? finder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            database,
            values,
          ],
          {#finder: finder},
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> put(
    _i3.Database? database,
    dynamic value, {
    dynamic key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            database,
            value,
          ],
          {#key: key},
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i3.QueryRef<Object?, Object?> query({_i3.Finder? finder}) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [],
          {#finder: finder},
        ),
        returnValue: _FakeQueryRef_4<Object?, Object?>(
          this,
          Invocation.method(
            #query,
            [],
            {#finder: finder},
          ),
        ),
      ) as _i3.QueryRef<Object?, Object?>);
}
